<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
			http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

	<!-- Spring的配置文件，这里主要配置和业务逻辑有关的 -->

	<!--数据库连接的配置信息(驱动,url,用户名,密码等) -->
	<context:property-placeholder location="classpath:db.properties" />

	<!-- Spring需要扫描的包:默认是全部扫描的,加入context:exclude-filter表示除了Controller和ControllerAdvice标识的，其它全部都要扫描到 -->
	<context:component-scan base-package="com.security">
		<!--不扫描控制器Controller和ControllerAdvice -->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<!--数据库连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="driverClass" value="${jdbc.driver}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>

	<!--Mybatis的工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--配置数据源-->
		<property name="dataSource" ref="dataSource"></property>
		<!--设置mybatis配置文件的位置-->
		<property name="configLocation" value="classpath:mybatis.xml"></property>
		<!--设置实体类的别名的包名 -->
		<property name="typeAliasesPackage" value="com.security.bean"></property>
	</bean>

	<!--scan for mappers and let them be autowired-->
	<!--1、扫描Mapper,并且自动注入-->
	<mybatis:scan base-package="com.security.dao" />

	<!--2、Mapper动态代理开发 ,扫描Mapper(使用1或者2均可)-->
	<!-- 扫描所有dao接口的实现,加入到IOC容器中  -->
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
		<property name="basePackage" value="com.security.dao"></property>
	</bean> -->

	<!-- 配置事务 -->
	<!-- 事务控制 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<!-- 设置数据源  -->
		<property name="dataSource" ref="dataSource"/>
	 </bean>

	<!--开启事务，使用xml配置形式的事务（必要主要的都是使用配置式） -->
	<aop:config> 
		<!-- 切入点表达式  -->
		<aop:pointcut expression="execution(* com.security.service..*(..))" id="txPoint" />
		 <!-- 配置事务增强  -->
		 <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint" />
	 </aop:config>

	<!--配置事务增强,事务如何切入 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 传播行为 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="query*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
		
	</tx:advice>

	<!--事务可以启动注解式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

</beans>